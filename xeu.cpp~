#include "xeu_utils/StreamParser.h"
#include <iostream>
#include <vector>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>

using namespace xeu_utils;
using namespace std;



int lsh_launch(char* const* args)
{
  pid_t pid, wpid;
  int status;

  pid = fork();
  if (pid == 0) {
    // Child process
    if (execvp(args[0], args) == -1) {
      perror("error: ");
      exit(EXIT_FAILURE);
    }
  } else if (pid < 0) {
    // Error forking
    perror("error: ");
  } else {
    // Parent process
    do {
      wpid = waitpid(pid, &status, WUNTRACED);
    } while (!WIFEXITED(status) && !WIFSIGNALED(status));
  }

  return 1;
}


char *lsh_read_line(void)
{
  char *line = NULL ;
  size_t bufsize = 0; // have getline allocate a buffer for us
  getline(&line, &bufsize, stdin);
  return line;
}

int main() {
  //ParsingState p = StreamParser().parse();
  // cout << p.dump();
  // vector<Command> commands = p.commands();
  char *buf;
  char *line;
  char **argus;
  vector<Command> commands;
  buf=(char *)malloc(10*sizeof(char));
  getlogin_r(buf, 10);
  do {
   printf("%s =>", buf);
   ParsingState p = StreamParser().parse();
   //line = lsh_read_line();
   //p.parse_next(line);
   commands = p.commands();
   //for(int i=0; i<sizeof(commands); i++){
    for (std::vector<Command>::iterator itr = commands.begin(); itr != commands.end(); itr++) {
     lsh_launch((*itr).argv());
     
   }
 } while (1);
   
  return 0;
}

